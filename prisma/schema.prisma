// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("POSTGRES_PRISMA_URL")
  // non pooling とは、DB接続をプールしないという意味 プールとは、DB接続を事前に確立しておき、必要に応じて接続を再利用する仕組み
  directUrl = env("POSTGRES_URL_NON_POOLING")
  // migration操作するときに本番DBに影響を与えないようにするために、shadowDatabaseUrlを指定する
  shadowDatabaseUrl = env("POSTGRES_URL_NON_POOLING")
}

// book は マイクロsmsで管理するので、ここでは定義しない


model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.Text
  access_token       String?  @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

// 複合ユニーク制約: ２つセットで、ユニークになる、 providerとproviderAccountIdの組み合わせがユニークになるということ
// where区では、provider_providerAccountIdという名前で、組み合わせを指定する

  @@unique([provider, providerAccountId])
}

// nextjsのmiddlewareは、リクエストがサーバーに到達する前に実行されるコード
// そのため、session管理は、jwtを使うのでdbは使わないが、デフォルト
model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  // idは、cuid()を使って、ランダムな文字列を生成する これは、プライマリーキーになる
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  companyId     String?
  accounts      Account[]
  sessions      Session[]
  plans         Plan[]
  applications  Application[]
  receivedApplications Application[] @relation("applicationRecipient") // 追加: Userが応募先としての応募を示す
  description   String?
  profession    String?
  posseGeneration String?

  company       Company?  @relation(fields: [companyId], references: [id])
}

// 購入履歴
model Plan {
  // idは、cuid()を使って、ランダムな文字列を生成する これは、プライマリーキーになる
  id String @id @default(cuid())
  userId String
  title String
  description String
  image String
  isPublic Boolean
  createdAt DateTime @default(now())
  // onDelete: Cascade は、親テーブルのレコードが削除されたら、子テーブルのレコードも削除するという意味
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  applications Application[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Company {
  id String @id @default(cuid())
  name String @unique
  users User[]
}

model Application {
  id        String   @id @default(cuid())
  userId    String // 応募したユーザーID
  recipientId String // 応募先のユーザーID
  planId    String?   // 応募された計画のID
  status    String   // 応募の状態 ("pending", "approved", "rejected", "requested":プランを出してもらうリクエスト)
  createdAt DateTime @default(now()) // 応募日時
  updatedAt DateTime @updatedAt     // 最終更新日時

  user      User     @relation(fields: [userId], references: [id])
  recipient   User     @relation("applicationRecipient", fields: [recipientId], references: [id])
  plan      Plan?     @relation(fields: [planId], references: [id])

  @@index([userId], name: "idx_application_user")
  @@index([recipientId], name: "idx_application_recipient")
  @@index([planId], name: "idx_application_plan")
}
